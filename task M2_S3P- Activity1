#include <iostream>
#include <stdlib.h>
#include <omp.h>
#include <time.h>
#include <string>

using namespace std;

#define NUM_THREADS 8
#define MAX 1000000

int data[MAX];
long global_sum = 0;

int main(int argc, char *argv[])
{
    int cores = omp_get_num_procs();
    cout << "The number of cores on this machine = " << cores << endl;

    srand(time(NULL));

    // Fill the data array with random integers between 0 and 19
    for (int i = 0; i < MAX; i++)
    {
        data[i] = rand() % 20;
    }

    // Compute the sum of the data array in parallel
    #pragma omp parallel num_threads(NUM_THREADS) shared(global_sum)
    {
        long local_sum = 0;

        #pragma omp for
        for (int i = 0; i < MAX; i++)
        {
            local_sum += data[i];
        }

        #pragma omp critical
        {
            global_sum += local_sum;
        }
    }

    cout << "The final sum = " << global_sum << endl;

    return 0;
}
